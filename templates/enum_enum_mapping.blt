///////////////////////////////////////////////////////////////////////////////
`
in_type = (output_enum.namespace == input_enum.namespace ? (input_enum.name) : (input_enum.full_name))
out_type = (output_enum.namespace == input_enum.namespace ? (output_enum.name) : (output_enum.full_name))

out_type` `name`(`in_type` constant) noexcept {
   switch (constant) {`
input = input_enum
output = output_enum
max_length = input.max_constant_name_length
_mapper = mapper
_mapper_is_func = type(mapper) == 'function'
_default = output.constant_map[default].name
with each input.constants using # {
   _value = _mapper_is_func ? _mapper($, input, output) : $[_mapper]
   if _value {
      _value = output.constant_map[_value]
      if _value && _value.name ~= _default {
         nl `      case `in_type`::`name`:`
         string.rep(' ', max_length + 1 - #name)
         `return `out_type`::`_value.name`;`
      }
   }
}
`
      default:
         return `out_type`::`_default`;
   }
}

